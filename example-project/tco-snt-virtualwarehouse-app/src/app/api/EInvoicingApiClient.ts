/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.9.0 (NJsonSchema v10.4.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const EINVOICING_API_BASE_URL = new InjectionToken<string>('EINVOICING_API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class EInvoicingApiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(EINVOICING_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param registrationNumber (optional) 
     * @param invoiceNumber (optional) 
     * @param aribaInvoiceId (optional) 
     * @param reconcilationStatus (optional) 
     * @param dateFrom (optional) 
     * @param dateTo (optional) 
     * @param pageIndex (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    apModuleInvoices(registrationNumber?: string | null | undefined, invoiceNumber?: string | null | undefined, aribaInvoiceId?: string | null | undefined, reconcilationStatus?: ReconcilationStatus | undefined, dateFrom?: Date | undefined, dateTo?: Date | undefined, pageIndex?: number | undefined, pageSize?: number | undefined): Observable<ApModuleRowViewModel[]> {
        let url_ = this.baseUrl + "/api/ApModule/ApModuleInvoices?";
        if (registrationNumber !== undefined && registrationNumber !== null)
            url_ += "RegistrationNumber=" + encodeURIComponent("" + registrationNumber) + "&";
        if (invoiceNumber !== undefined && invoiceNumber !== null)
            url_ += "InvoiceNumber=" + encodeURIComponent("" + invoiceNumber) + "&";
        if (aribaInvoiceId !== undefined && aribaInvoiceId !== null)
            url_ += "AribaInvoiceId=" + encodeURIComponent("" + aribaInvoiceId) + "&";
        if (reconcilationStatus === null)
            throw new Error("The parameter 'reconcilationStatus' cannot be null.");
        else if (reconcilationStatus !== undefined)
            url_ += "ReconcilationStatus=" + encodeURIComponent("" + reconcilationStatus) + "&";
        if (dateFrom === null)
            throw new Error("The parameter 'dateFrom' cannot be null.");
        else if (dateFrom !== undefined)
            url_ += "DateFrom=" + encodeURIComponent(dateFrom ? "" + dateFrom.toJSON() : "") + "&";
        if (dateTo === null)
            throw new Error("The parameter 'dateTo' cannot be null.");
        else if (dateTo !== undefined)
            url_ += "DateTo=" + encodeURIComponent(dateTo ? "" + dateTo.toJSON() : "") + "&";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApModuleInvoices(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApModuleInvoices(<any>response_);
                } catch (e) {
                    return <Observable<ApModuleRowViewModel[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApModuleRowViewModel[]>><any>_observableThrow(response_);
        }));
    }

    protected processApModuleInvoices(response: HttpResponseBase): Observable<ApModuleRowViewModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ApModuleRowViewModel.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    }

    /**
     * @param registrationNumber (optional) 
     * @param invoiceNumber (optional) 
     * @param aribaInvoiceId (optional) 
     * @param reconcilationStatus (optional) 
     * @param dateFrom (optional) 
     * @param dateTo (optional) 
     * @param pageIndex (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    apModuleInvoicesPaging(registrationNumber?: string | null | undefined, invoiceNumber?: string | null | undefined, aribaInvoiceId?: string | null | undefined, reconcilationStatus?: ReconcilationStatus | undefined, dateFrom?: Date | undefined, dateTo?: Date | undefined, pageIndex?: number | undefined, pageSize?: number | undefined): Observable<ApModuleRowViewModelBasePagingViewModel> {
        let url_ = this.baseUrl + "/api/ApModule/ApModuleInvoicesPaging?";
        if (registrationNumber !== undefined && registrationNumber !== null)
            url_ += "RegistrationNumber=" + encodeURIComponent("" + registrationNumber) + "&";
        if (invoiceNumber !== undefined && invoiceNumber !== null)
            url_ += "InvoiceNumber=" + encodeURIComponent("" + invoiceNumber) + "&";
        if (aribaInvoiceId !== undefined && aribaInvoiceId !== null)
            url_ += "AribaInvoiceId=" + encodeURIComponent("" + aribaInvoiceId) + "&";
        if (reconcilationStatus === null)
            throw new Error("The parameter 'reconcilationStatus' cannot be null.");
        else if (reconcilationStatus !== undefined)
            url_ += "ReconcilationStatus=" + encodeURIComponent("" + reconcilationStatus) + "&";
        if (dateFrom === null)
            throw new Error("The parameter 'dateFrom' cannot be null.");
        else if (dateFrom !== undefined)
            url_ += "DateFrom=" + encodeURIComponent(dateFrom ? "" + dateFrom.toJSON() : "") + "&";
        if (dateTo === null)
            throw new Error("The parameter 'dateTo' cannot be null.");
        else if (dateTo !== undefined)
            url_ += "DateTo=" + encodeURIComponent(dateTo ? "" + dateTo.toJSON() : "") + "&";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApModuleInvoicesPaging(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApModuleInvoicesPaging(<any>response_);
                } catch (e) {
                    return <Observable<ApModuleRowViewModelBasePagingViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApModuleRowViewModelBasePagingViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processApModuleInvoicesPaging(response: HttpResponseBase): Observable<ApModuleRowViewModelBasePagingViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApModuleRowViewModelBasePagingViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApModuleRowViewModelBasePagingViewModel>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateEsfInvoice(body?: UpdateEsfInvoiceCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/ApModule/UpdateEsfInvoice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateEsfInvoice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateEsfInvoice(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateEsfInvoice(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return Success
     */
    nonContractInvoices(): Observable<VNoContractEsfInvoices[]> {
        let url_ = this.baseUrl + "/api/ReconTool/NonContractInvoices";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processNonContractInvoices(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processNonContractInvoices(<any>response_);
                } catch (e) {
                    return <Observable<VNoContractEsfInvoices[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<VNoContractEsfInvoices[]>><any>_observableThrow(response_);
        }));
    }

    protected processNonContractInvoices(response: HttpResponseBase): Observable<VNoContractEsfInvoices[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(VNoContractEsfInvoices.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    }

    /**
     * @return Success
     */
    get(): Observable<void> {
        let url_ = this.baseUrl + "/Test/Get";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return Success
     */
    authGet(): Observable<void> {
        let url_ = this.baseUrl + "/Test/AuthGet";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuthGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuthGet(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAuthGet(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export enum ReconcilationStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export enum ApMatchingCondition {
    _10 = 10,
    _20 = 20,
    _30 = 30,
    _40 = 40,
}

export class ApModuleDto implements IApModuleDto {
    esfinvoiceId?: number;
    idEsf?: number;
    invoiceStatusEsf?: string | undefined;
    registrationNumberEsf?: string | undefined;
    currencyCodeEsf?: string | undefined;
    contractEsf?: string | undefined;
    lastUpdatedDateEsf?: Date | undefined;
    envoiceDateEsf?: Date | undefined;
    supplierNameEsf?: string | undefined;
    invoiceTypeEsf?: string | undefined;
    invoiceNumberEsf?: string | undefined;
    netAmountEsf?: number;
    taxAmountEsf?: number;
    grossAmountEsf?: number;
    commentEsf?: string | undefined;
    idAriba?: number;
    invoiceStatusAriba?: string | undefined;
    registrationNumberAriba?: string | undefined;
    currencyCodeAriba?: string | undefined;
    contractAriba?: string | undefined;
    supplierNameAriba?: string | undefined;
    invoiceNumberAriba?: string | undefined;
    netAmountAriba?: number;
    taxAmountAriba?: number;
    grossAmountAriba?: number;
    amountTransCurrencyAriba?: number;
    lineTaxAmountTransCurrencyAriba?: number;
    invoiceNetAmountUsdAriba?: number;
    amountUsdAriba?: number;
    lastUpdatedDateAriba?: Date | undefined;
    reconsiliationFailedStatuses?: ApMatchingCondition[] | undefined;
    readonly hasAribaMatch?: boolean;

    constructor(data?: IApModuleDto) {
        if (data) {
            for (let property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.esfinvoiceId = _data["esfinvoiceId"];
            this.idEsf = _data["idEsf"];
            this.invoiceStatusEsf = _data["invoiceStatusEsf"];
            this.registrationNumberEsf = _data["registrationNumberEsf"];
            this.currencyCodeEsf = _data["currencyCodeEsf"];
            this.contractEsf = _data["contractEsf"];
            this.lastUpdatedDateEsf = _data["lastUpdatedDateEsf"] ? new Date(_data["lastUpdatedDateEsf"].toString()) : <any>undefined;
            this.envoiceDateEsf = _data["envoiceDateEsf"] ? new Date(_data["envoiceDateEsf"].toString()) : <any>undefined;
            this.supplierNameEsf = _data["supplierNameEsf"];
            this.invoiceTypeEsf = _data["invoiceTypeEsf"];
            this.invoiceNumberEsf = _data["invoiceNumberEsf"];
            this.netAmountEsf = _data["netAmountEsf"];
            this.taxAmountEsf = _data["taxAmountEsf"];
            this.grossAmountEsf = _data["grossAmountEsf"];
            this.commentEsf = _data["commentEsf"];
            this.idAriba = _data["idAriba"];
            this.invoiceStatusAriba = _data["invoiceStatusAriba"];
            this.registrationNumberAriba = _data["registrationNumberAriba"];
            this.currencyCodeAriba = _data["currencyCodeAriba"];
            this.contractAriba = _data["contractAriba"];
            this.supplierNameAriba = _data["supplierNameAriba"];
            this.invoiceNumberAriba = _data["invoiceNumberAriba"];
            this.netAmountAriba = _data["netAmountAriba"];
            this.taxAmountAriba = _data["taxAmountAriba"];
            this.grossAmountAriba = _data["grossAmountAriba"];
            this.amountTransCurrencyAriba = _data["amountTransCurrencyAriba"];
            this.lineTaxAmountTransCurrencyAriba = _data["lineTaxAmountTransCurrencyAriba"];
            this.invoiceNetAmountUsdAriba = _data["invoiceNetAmountUsdAriba"];
            this.amountUsdAriba = _data["amountUsdAriba"];
            this.lastUpdatedDateAriba = _data["lastUpdatedDateAriba"] ? new Date(_data["lastUpdatedDateAriba"].toString()) : <any>undefined;
            if (Array.isArray(_data["reconsiliationFailedStatuses"])) {
                this.reconsiliationFailedStatuses = [] as any;
                for (let item of _data["reconsiliationFailedStatuses"])
                    this.reconsiliationFailedStatuses!.push(item);
            }
            (<any>this).hasAribaMatch = _data["hasAribaMatch"];
        }
    }

    static fromJS(data: any): ApModuleDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApModuleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["esfinvoiceId"] = this.esfinvoiceId;
        data["idEsf"] = this.idEsf;
        data["invoiceStatusEsf"] = this.invoiceStatusEsf;
        data["registrationNumberEsf"] = this.registrationNumberEsf;
        data["currencyCodeEsf"] = this.currencyCodeEsf;
        data["contractEsf"] = this.contractEsf;
        data["lastUpdatedDateEsf"] = this.lastUpdatedDateEsf ? this.lastUpdatedDateEsf.toISOString() : <any>undefined;
        data["envoiceDateEsf"] = this.envoiceDateEsf ? this.envoiceDateEsf.toISOString() : <any>undefined;
        data["supplierNameEsf"] = this.supplierNameEsf;
        data["invoiceTypeEsf"] = this.invoiceTypeEsf;
        data["invoiceNumberEsf"] = this.invoiceNumberEsf;
        data["netAmountEsf"] = this.netAmountEsf;
        data["taxAmountEsf"] = this.taxAmountEsf;
        data["grossAmountEsf"] = this.grossAmountEsf;
        data["commentEsf"] = this.commentEsf;
        data["idAriba"] = this.idAriba;
        data["invoiceStatusAriba"] = this.invoiceStatusAriba;
        data["registrationNumberAriba"] = this.registrationNumberAriba;
        data["currencyCodeAriba"] = this.currencyCodeAriba;
        data["contractAriba"] = this.contractAriba;
        data["supplierNameAriba"] = this.supplierNameAriba;
        data["invoiceNumberAriba"] = this.invoiceNumberAriba;
        data["netAmountAriba"] = this.netAmountAriba;
        data["taxAmountAriba"] = this.taxAmountAriba;
        data["grossAmountAriba"] = this.grossAmountAriba;
        data["amountTransCurrencyAriba"] = this.amountTransCurrencyAriba;
        data["lineTaxAmountTransCurrencyAriba"] = this.lineTaxAmountTransCurrencyAriba;
        data["invoiceNetAmountUsdAriba"] = this.invoiceNetAmountUsdAriba;
        data["amountUsdAriba"] = this.amountUsdAriba;
        data["lastUpdatedDateAriba"] = this.lastUpdatedDateAriba ? this.lastUpdatedDateAriba.toISOString() : <any>undefined;
        if (Array.isArray(this.reconsiliationFailedStatuses)) {
            data["reconsiliationFailedStatuses"] = [];
            for (let item of this.reconsiliationFailedStatuses)
                data["reconsiliationFailedStatuses"].push(item);
        }
        data["hasAribaMatch"] = this.hasAribaMatch;
        return data; 
    }
}

export interface IApModuleDto {
    esfinvoiceId?: number;
    idEsf?: number;
    invoiceStatusEsf?: string | undefined;
    registrationNumberEsf?: string | undefined;
    currencyCodeEsf?: string | undefined;
    contractEsf?: string | undefined;
    lastUpdatedDateEsf?: Date | undefined;
    envoiceDateEsf?: Date | undefined;
    supplierNameEsf?: string | undefined;
    invoiceTypeEsf?: string | undefined;
    invoiceNumberEsf?: string | undefined;
    netAmountEsf?: number;
    taxAmountEsf?: number;
    grossAmountEsf?: number;
    commentEsf?: string | undefined;
    idAriba?: number;
    invoiceStatusAriba?: string | undefined;
    registrationNumberAriba?: string | undefined;
    currencyCodeAriba?: string | undefined;
    contractAriba?: string | undefined;
    supplierNameAriba?: string | undefined;
    invoiceNumberAriba?: string | undefined;
    netAmountAriba?: number;
    taxAmountAriba?: number;
    grossAmountAriba?: number;
    amountTransCurrencyAriba?: number;
    lineTaxAmountTransCurrencyAriba?: number;
    invoiceNetAmountUsdAriba?: number;
    amountUsdAriba?: number;
    lastUpdatedDateAriba?: Date | undefined;
    reconsiliationFailedStatuses?: ApMatchingCondition[] | undefined;
    hasAribaMatch?: boolean;
}

export class ApModuleRowViewModel implements IApModuleRowViewModel {
    rowSummary?: ApModuleDto;
    rowMatchedItems?: ApModuleDto[] | undefined;

    constructor(data?: IApModuleRowViewModel) {
        if (data) {
            for (let property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.rowSummary = _data["rowSummary"] ? ApModuleDto.fromJS(_data["rowSummary"]) : <any>undefined;
            if (Array.isArray(_data["rowMatchedItems"])) {
                this.rowMatchedItems = [] as any;
                for (let item of _data["rowMatchedItems"])
                    this.rowMatchedItems!.push(ApModuleDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApModuleRowViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ApModuleRowViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rowSummary"] = this.rowSummary ? this.rowSummary.toJSON() : <any>undefined;
        if (Array.isArray(this.rowMatchedItems)) {
            data["rowMatchedItems"] = [];
            for (let item of this.rowMatchedItems)
                data["rowMatchedItems"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IApModuleRowViewModel {
    rowSummary?: ApModuleDto;
    rowMatchedItems?: ApModuleDto[] | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (let property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

export class ApModuleRowViewModelBasePagingViewModel implements IApModuleRowViewModelBasePagingViewModel {
    itemsCount?: number;
    readonly pageIndex?: number;
    readonly totalPages?: number;
    data?: ApModuleRowViewModel[] | undefined;

    constructor(data?: IApModuleRowViewModelBasePagingViewModel) {
        if (data) {
            for (let property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.itemsCount = _data["itemsCount"];
            (<any>this).pageIndex = _data["pageIndex"];
            (<any>this).totalPages = _data["totalPages"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ApModuleRowViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApModuleRowViewModelBasePagingViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ApModuleRowViewModelBasePagingViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemsCount"] = this.itemsCount;
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IApModuleRowViewModelBasePagingViewModel {
    itemsCount?: number;
    pageIndex?: number;
    totalPages?: number;
    data?: ApModuleRowViewModel[] | undefined;
}

export class UpdateEsfInvoiceCommand implements IUpdateEsfInvoiceCommand {
    id?: number;
    comment?: string | undefined;

    constructor(data?: IUpdateEsfInvoiceCommand) {
        if (data) {
            for (let property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.comment = _data["comment"];
        }
    }

    static fromJS(data: any): UpdateEsfInvoiceCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateEsfInvoiceCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["comment"] = this.comment;
        return data; 
    }
}

export interface IUpdateEsfInvoiceCommand {
    id?: number;
    comment?: string | undefined;
}

export class VNoContractEsfInvoices implements IVNoContractEsfInvoices {
    id?: number;
    number?: string | undefined;
    additionalNumber?: string | undefined;
    supplierNumber?: string | undefined;
    invoiceDate?: Date;
    docNumber?: string | undefined;
    contract?: string | undefined;
    eiisStatusId?: number | undefined;
    netAmount?: number | undefined;
    invoiceAmount?: number | undefined;
    invoiceAmountUSD?: number | undefined;
    workTicket?: string | undefined;
    taxRateArea?: string | undefined;
    isDeleted?: boolean;
    deliveryDate?: Date | undefined;
    inputDate?: Date | undefined;
    invoiceStatus?: string | undefined;
    esfLastUpdateDate?: Date | undefined;
    registrationNumber?: string | undefined;
    invoiceId?: number | undefined;
    eInvoiceType?: string | undefined;
    sellerTIN?: string | undefined;
    sellerName?: string | undefined;
    customerTIN?: string | undefined;
    customerName?: string | undefined;
    contractDate?: Date | undefined;
    currencyCode?: string | undefined;
    totalExciseAmount?: number | undefined;
    totalNdsAmount?: number | undefined;
    totalPriceWithTax?: number | undefined;
    turnoverDate?: Date | undefined;
    totalPriceWithoutTax?: number | undefined;
    direction?: number | undefined;
    parentInvoiceID?: number | undefined;
    sequenceInvoiceId?: number | undefined;
    comment?: string | undefined;
    vatRegistrationCertificateSeries?: string | undefined;
    vaT_RegistrationCertificate?: string | undefined;
    isMatched?: boolean | undefined;
    isInSequence?: boolean | undefined;
    addedToSequence?: boolean | undefined;
    lastUpdateDate?: Date | undefined;
    exerciseWay?: string | undefined;
    termsOfPayment?: string | undefined;
    isAriba?: boolean | undefined;
    source?: string | undefined;

    constructor(data?: IVNoContractEsfInvoices) {
        if (data) {
            for (let property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.number = _data["number"];
            this.additionalNumber = _data["additionalNumber"];
            this.supplierNumber = _data["supplierNumber"];
            this.invoiceDate = _data["invoiceDate"] ? new Date(_data["invoiceDate"].toString()) : <any>undefined;
            this.docNumber = _data["docNumber"];
            this.contract = _data["contract"];
            this.eiisStatusId = _data["eiisStatusId"];
            this.netAmount = _data["netAmount"];
            this.invoiceAmount = _data["invoiceAmount"];
            this.invoiceAmountUSD = _data["invoiceAmountUSD"];
            this.workTicket = _data["workTicket"];
            this.taxRateArea = _data["taxRateArea"];
            this.isDeleted = _data["isDeleted"];
            this.deliveryDate = _data["deliveryDate"] ? new Date(_data["deliveryDate"].toString()) : <any>undefined;
            this.inputDate = _data["inputDate"] ? new Date(_data["inputDate"].toString()) : <any>undefined;
            this.invoiceStatus = _data["invoiceStatus"];
            this.esfLastUpdateDate = _data["esfLastUpdateDate"] ? new Date(_data["esfLastUpdateDate"].toString()) : <any>undefined;
            this.registrationNumber = _data["registrationNumber"];
            this.invoiceId = _data["invoiceId"];
            this.eInvoiceType = _data["eInvoiceType"];
            this.sellerTIN = _data["sellerTIN"];
            this.sellerName = _data["sellerName"];
            this.customerTIN = _data["customerTIN"];
            this.customerName = _data["customerName"];
            this.contractDate = _data["contractDate"] ? new Date(_data["contractDate"].toString()) : <any>undefined;
            this.currencyCode = _data["currencyCode"];
            this.totalExciseAmount = _data["totalExciseAmount"];
            this.totalNdsAmount = _data["totalNdsAmount"];
            this.totalPriceWithTax = _data["totalPriceWithTax"];
            this.turnoverDate = _data["turnoverDate"] ? new Date(_data["turnoverDate"].toString()) : <any>undefined;
            this.totalPriceWithoutTax = _data["totalPriceWithoutTax"];
            this.direction = _data["direction"];
            this.parentInvoiceID = _data["parentInvoiceID"];
            this.sequenceInvoiceId = _data["sequenceInvoiceId"];
            this.comment = _data["comment"];
            this.vatRegistrationCertificateSeries = _data["vatRegistrationCertificateSeries"];
            this.vaT_RegistrationCertificate = _data["vaT_RegistrationCertificate"];
            this.isMatched = _data["isMatched"];
            this.isInSequence = _data["isInSequence"];
            this.addedToSequence = _data["addedToSequence"];
            this.lastUpdateDate = _data["lastUpdateDate"] ? new Date(_data["lastUpdateDate"].toString()) : <any>undefined;
            this.exerciseWay = _data["exerciseWay"];
            this.termsOfPayment = _data["termsOfPayment"];
            this.isAriba = _data["isAriba"];
            this.source = _data["source"];
        }
    }

    static fromJS(data: any): VNoContractEsfInvoices {
        data = typeof data === 'object' ? data : {};
        let result = new VNoContractEsfInvoices();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["number"] = this.number;
        data["additionalNumber"] = this.additionalNumber;
        data["supplierNumber"] = this.supplierNumber;
        data["invoiceDate"] = this.invoiceDate ? this.invoiceDate.toISOString() : <any>undefined;
        data["docNumber"] = this.docNumber;
        data["contract"] = this.contract;
        data["eiisStatusId"] = this.eiisStatusId;
        data["netAmount"] = this.netAmount;
        data["invoiceAmount"] = this.invoiceAmount;
        data["invoiceAmountUSD"] = this.invoiceAmountUSD;
        data["workTicket"] = this.workTicket;
        data["taxRateArea"] = this.taxRateArea;
        data["isDeleted"] = this.isDeleted;
        data["deliveryDate"] = this.deliveryDate ? this.deliveryDate.toISOString() : <any>undefined;
        data["inputDate"] = this.inputDate ? this.inputDate.toISOString() : <any>undefined;
        data["invoiceStatus"] = this.invoiceStatus;
        data["esfLastUpdateDate"] = this.esfLastUpdateDate ? this.esfLastUpdateDate.toISOString() : <any>undefined;
        data["registrationNumber"] = this.registrationNumber;
        data["invoiceId"] = this.invoiceId;
        data["eInvoiceType"] = this.eInvoiceType;
        data["sellerTIN"] = this.sellerTIN;
        data["sellerName"] = this.sellerName;
        data["customerTIN"] = this.customerTIN;
        data["customerName"] = this.customerName;
        data["contractDate"] = this.contractDate ? this.contractDate.toISOString() : <any>undefined;
        data["currencyCode"] = this.currencyCode;
        data["totalExciseAmount"] = this.totalExciseAmount;
        data["totalNdsAmount"] = this.totalNdsAmount;
        data["totalPriceWithTax"] = this.totalPriceWithTax;
        data["turnoverDate"] = this.turnoverDate ? this.turnoverDate.toISOString() : <any>undefined;
        data["totalPriceWithoutTax"] = this.totalPriceWithoutTax;
        data["direction"] = this.direction;
        data["parentInvoiceID"] = this.parentInvoiceID;
        data["sequenceInvoiceId"] = this.sequenceInvoiceId;
        data["comment"] = this.comment;
        data["vatRegistrationCertificateSeries"] = this.vatRegistrationCertificateSeries;
        data["vaT_RegistrationCertificate"] = this.vaT_RegistrationCertificate;
        data["isMatched"] = this.isMatched;
        data["isInSequence"] = this.isInSequence;
        data["addedToSequence"] = this.addedToSequence;
        data["lastUpdateDate"] = this.lastUpdateDate ? this.lastUpdateDate.toISOString() : <any>undefined;
        data["exerciseWay"] = this.exerciseWay;
        data["termsOfPayment"] = this.termsOfPayment;
        data["isAriba"] = this.isAriba;
        data["source"] = this.source;
        return data; 
    }
}

export interface IVNoContractEsfInvoices {
    id?: number;
    number?: string | undefined;
    additionalNumber?: string | undefined;
    supplierNumber?: string | undefined;
    invoiceDate?: Date;
    docNumber?: string | undefined;
    contract?: string | undefined;
    eiisStatusId?: number | undefined;
    netAmount?: number | undefined;
    invoiceAmount?: number | undefined;
    invoiceAmountUSD?: number | undefined;
    workTicket?: string | undefined;
    taxRateArea?: string | undefined;
    isDeleted?: boolean;
    deliveryDate?: Date | undefined;
    inputDate?: Date | undefined;
    invoiceStatus?: string | undefined;
    esfLastUpdateDate?: Date | undefined;
    registrationNumber?: string | undefined;
    invoiceId?: number | undefined;
    eInvoiceType?: string | undefined;
    sellerTIN?: string | undefined;
    sellerName?: string | undefined;
    customerTIN?: string | undefined;
    customerName?: string | undefined;
    contractDate?: Date | undefined;
    currencyCode?: string | undefined;
    totalExciseAmount?: number | undefined;
    totalNdsAmount?: number | undefined;
    totalPriceWithTax?: number | undefined;
    turnoverDate?: Date | undefined;
    totalPriceWithoutTax?: number | undefined;
    direction?: number | undefined;
    parentInvoiceID?: number | undefined;
    sequenceInvoiceId?: number | undefined;
    comment?: string | undefined;
    vatRegistrationCertificateSeries?: string | undefined;
    vaT_RegistrationCertificate?: string | undefined;
    isMatched?: boolean | undefined;
    isInSequence?: boolean | undefined;
    addedToSequence?: boolean | undefined;
    lastUpdateDate?: Date | undefined;
    exerciseWay?: string | undefined;
    termsOfPayment?: string | undefined;
    isAriba?: boolean | undefined;
    source?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}